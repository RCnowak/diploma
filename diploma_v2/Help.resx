<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Инструкция по эксплуатации

Данное приложение предназначено для решения задач оптимального управления с интегродифференциальными связями с одним управлением.

1. Создание задачи.
Для создания задачи следует выбрать меню "Файл -&gt; Новая задача". Далее ввести размерность Х, размерность параметризации управления, начальный и конечный моменты времени,
количество моментов переключения, шаг интегрирования и выбрать способ вычисления производных.
Внимание! При вводе чисел с плавующей точкой для разделения целой и дробной части следует использовать "."!
Далее в основной области программы появится заготовка для ввода данны задачи. Следуйте указаниям, введите то, что требуется, каждый раз начиная с новой строки.
Если отсутствует интегральная или терминальная часть, то следует ввести 0.

Например:
Enter the initial value for x1
0
Enter the initial value for x2
1
Enter the last value for p1
0
Enter the last value for p2
0
Enter the initial value of u
Enter the v00
0.1
Enter the v10
0.3
...
Enter the integral part of dx2dt
0
Enter the terminal part of dx1/dt by du
1

При вводе формул допускаются следующих операций +, -, *, /, ^, тригометрические функции sin, cos, tg, ctg, а также получение числа е и
натруального логарифма ln. Вводить формулу следует без пробелов! Допустимыми символами названий переменных являются x{номер икса}, u, s и t.
Примеры формул:
(t*x1-u-t^2+t+ln(e))^2
(t*u+x1+1-s-t)*e^(s*(t-s))
2*u-2*t*x1+2*t^2-2*t-2

2. Запуск решения.
Создав новую задачу или загрузив старую, выберете метод оптимизации (по умолчанию включен Градиентный метод) и нажмите кнопку "Запустить" на панели.
В правой области экрана начнут появляться результаты промежуточных вычислений. В поле "Статус" отобразится статус решения ("Запущен метод ...").
После завершения всех вычислений появится окно с результатами, в котором можно будет сохранить результаты, а также перезапустить задачу другим методом,
используя результаты предыдущего запуска, как начальное приближение для нового.

3. Сохранение задачи.
Всю информацию о задачи можно сохранить кликнув меню "Файл -&gt; Сохранить". Программа сохранит данные в нужном ей формате. Не следует редактировать данные 
напрямую из файла! Это может привести к ошибке парсинга при загрузке.

4. Загрузка задачи.
Загрузить задачу можно через меню "Файл -&gt; Загрузить". Появится окно, в котором надо указать файл, в котором хранится информация о сохраненном файле.

5. Конфигурирование хода решения.
Зайдя в меню "Задача -&gt; Опции" можно указать точность вычислений, количество итераций метода, размерность дискретного хранения и количество значений 
функций для численного дифференцирования</value>
  </data>
</root>